import { UrlFragmentCore } from './url-fragment-core';

/**
 * A thin layer around the actual functionality in {@link UrlFragmentCore}, hooking up the I/O to the browser.
 */
export class UrlFragment extends UrlFragmentCore {
  private static readonly singletonSymbol = Symbol.for('dk.northtech.ratatosk.UrlFragment');

  /**
   * Lazy singleton instance. Use this to access the functionality in a browser, to avoid multiple event listeners in the DOM.
   */
  static get globalInstance(): UrlFragment {
    let instance = (window as any)[UrlFragment.singletonSymbol] as UrlFragment;
    if (!instance) {
      instance = (window as any)[UrlFragment.singletonSymbol] = new UrlFragment();
    }
    return instance;
  }

  private debounceHandle = -1;

  private constructor() {
    super(hash => {
      // We use a slight delay to let multiple updates settle before reflecting them in the URL:
      window.clearTimeout(this.debounceHandle);
      this.debounceHandle = window.setTimeout(() => {
        if (document.location != null) {
          document.location.hash = hash;
        }
      }, 100);
    });
    this.parse(window.location.hash);
    window.addEventListener('hashchange', () => this.parse(window.location.hash));
  }
}
