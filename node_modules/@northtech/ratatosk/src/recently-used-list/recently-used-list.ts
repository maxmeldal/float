/**
 * Keeps track of most recently used items, accorting to when they are "touched".
 * @module
 */

import { BehaviorSubject, Observable } from 'rxjs';

/**
 * A collection keeping track of a number of objects ordered by when they were {@link touch}ed.
 */
export class RecentlyUsedList<T> {
  private list: BehaviorSubject<T[]> = new BehaviorSubject<T[]>([]);

  /**
   * The current list of objects.
   */
  get value(): T[] {
    return this.list.value;
  }

  /**
   * An observable emitting a new version of the list every time an object is {@link touch}ed.
   */
  get valueChanges(): Observable<T[]> {
    return this.list;
  }

  /**
   * @param maxSize The maximum number of items in the list. Old items will automatically be evicted.
   * @param equality If given, this equality function will be used to determine whether a
   * {@link touch}ed object matches one already in the list. If not given, coercing object equality
   * will be used.
   */
  constructor(private maxSize = 5, private equality?: (a: T, b: T) => boolean) {
  }

  /**
   * Registers the "use" of the given object, adding it (or moving it) to the start of the list, evicting the oldest
   * entry if the list grows beyond its max size.
   */
  touch(used: T): T {
    const l = this.list.value.filter(
      o => this.equality == null
        ? o !== used
        : !this.equality(o, used)
    );
    l.unshift(used);
    if (l.length > this.maxSize) {
      l.length = this.maxSize;
    }
    this.list.next(l);
    return used;
  }
}
