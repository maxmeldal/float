import { Observable } from 'rxjs';
/**
 * PartialObject is an Observable of an object which can be filled out with values one by one, emitting as each
 * property changes. This is particularly useful for assembling a configuration object from multiple (asynchronous)
 * sources.
 */
export declare class PartialObject<T> extends Observable<Partial<T>> {
    #private;
    constructor();
    /**
     * Binds one property of the object to an Observable delivering the appropriate type, making the PartialObject update
     * and emit each time a new value arrives on the bound Observable.
     *
     * *Note*: In many cases (especially when using data from a terminating Observable, such as a HTTP call), it is
     * probably more readable to simply subscribe to the Observable and set the received value using {@link set} or
     * {@link setAll}. The advantage of using this `.bind` method is that it keeps the bound observable "cold", and only
     * subscribes to it if there are subscribers to the PartialObject itself.
     *
     * @param k The name of a key in the PartialObject (based on its generic type).
     * @param v An Observable of the appropriate type (or null/undefined).
     */
    bind<U extends keyof T>(k: U, v: Observable<T[U] | undefined | null> | undefined): this;
    /**
     * Sets all the given properties in the PartialObject and emits of there are any changes.
     */
    setAll(o: Partial<T>): this;
    /**
     * Sets the given property in the PartialObject and emits of there are any changes.
     */
    set<U extends keyof T>(k: U, v: T[U] | undefined | null): this;
}
