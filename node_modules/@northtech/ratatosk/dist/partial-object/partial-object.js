var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PartialObject_data, _PartialObject_observers, _PartialObject_binds, _PartialObject_subscriptions;
import { Observable } from 'rxjs';
import { finalize } from 'rxjs/operators';
/**
 * PartialObject is an Observable of an object which can be filled out with values one by one, emitting as each
 * property changes. This is particularly useful for assembling a configuration object from multiple (asynchronous)
 * sources.
 */
export class PartialObject extends Observable {
    constructor() {
        super((observer) => {
            const prevSize = __classPrivateFieldGet(this, _PartialObject_observers, "f").size;
            __classPrivateFieldGet(this, _PartialObject_observers, "f").add(observer);
            if (prevSize === 0 && __classPrivateFieldGet(this, _PartialObject_observers, "f").size === 1) {
                __classPrivateFieldGet(this, _PartialObject_binds, "f").forEach((v, k) => {
                    __classPrivateFieldGet(this, _PartialObject_subscriptions, "f").set(k, v
                        .pipe(finalize(() => {
                        __classPrivateFieldGet(this, _PartialObject_subscriptions, "f").delete(k);
                    }))
                        .subscribe(o => this.set(k, o)));
                });
            }
            if (Object.keys(__classPrivateFieldGet(this, _PartialObject_data, "f")).length) {
                observer.next(Object.assign({}, __classPrivateFieldGet(this, _PartialObject_data, "f")));
            }
            return () => {
                __classPrivateFieldGet(this, _PartialObject_observers, "f").delete(observer);
                if (__classPrivateFieldGet(this, _PartialObject_observers, "f").size === 0) {
                    __classPrivateFieldGet(this, _PartialObject_subscriptions, "f").forEach(sub => sub.unsubscribe());
                }
            };
        });
        _PartialObject_data.set(this, {});
        _PartialObject_observers.set(this, new Set());
        _PartialObject_binds.set(this, new Map());
        _PartialObject_subscriptions.set(this, new Map());
    }
    /**
     * Binds one property of the object to an Observable delivering the appropriate type, making the PartialObject update
     * and emit each time a new value arrives on the bound Observable.
     *
     * *Note*: In many cases (especially when using data from a terminating Observable, such as a HTTP call), it is
     * probably more readable to simply subscribe to the Observable and set the received value using {@link set} or
     * {@link setAll}. The advantage of using this `.bind` method is that it keeps the bound observable "cold", and only
     * subscribes to it if there are subscribers to the PartialObject itself.
     *
     * @param k The name of a key in the PartialObject (based on its generic type).
     * @param v An Observable of the appropriate type (or null/undefined).
     */
    bind(k, v) {
        const sub = __classPrivateFieldGet(this, _PartialObject_subscriptions, "f").get(k);
        if (sub) {
            sub.unsubscribe();
        }
        __classPrivateFieldGet(this, _PartialObject_binds, "f").delete(k);
        if (v) {
            __classPrivateFieldGet(this, _PartialObject_binds, "f").set(k, v);
            if (__classPrivateFieldGet(this, _PartialObject_observers, "f").size) {
                __classPrivateFieldGet(this, _PartialObject_subscriptions, "f").set(k, v
                    .pipe(finalize(() => {
                    __classPrivateFieldGet(this, _PartialObject_subscriptions, "f").delete(k);
                }))
                    .subscribe(o => this.set(k, o)));
            }
        }
        return this;
    }
    /**
     * Sets all the given properties in the PartialObject and emits of there are any changes.
     */
    setAll(o) {
        let changed = false;
        Object.keys(o).forEach((k) => {
            const v = o[k];
            if (v == null) {
                changed = changed || (__classPrivateFieldGet(this, _PartialObject_data, "f")[k] != null);
                delete __classPrivateFieldGet(this, _PartialObject_data, "f")[k];
            }
            else {
                changed = changed || (__classPrivateFieldGet(this, _PartialObject_data, "f")[k] !== v);
                __classPrivateFieldGet(this, _PartialObject_data, "f")[k] = v;
            }
        });
        if (changed) {
            const emit = Object.assign({}, __classPrivateFieldGet(this, _PartialObject_data, "f"));
            __classPrivateFieldGet(this, _PartialObject_observers, "f").forEach(o => o.next(emit));
        }
        return this;
    }
    /**
     * Sets the given property in the PartialObject and emits of there are any changes.
     */
    set(k, v) {
        let changed;
        if (v == null) {
            changed = (__classPrivateFieldGet(this, _PartialObject_data, "f")[k] != null);
            delete __classPrivateFieldGet(this, _PartialObject_data, "f")[k];
        }
        else {
            changed = (__classPrivateFieldGet(this, _PartialObject_data, "f")[k] !== v);
            __classPrivateFieldGet(this, _PartialObject_data, "f")[k] = v;
        }
        if (changed) {
            const emit = Object.assign({}, __classPrivateFieldGet(this, _PartialObject_data, "f"));
            __classPrivateFieldGet(this, _PartialObject_observers, "f").forEach(o => o.next(emit));
        }
        return this;
    }
}
_PartialObject_data = new WeakMap(), _PartialObject_observers = new WeakMap(), _PartialObject_binds = new WeakMap(), _PartialObject_subscriptions = new WeakMap();
