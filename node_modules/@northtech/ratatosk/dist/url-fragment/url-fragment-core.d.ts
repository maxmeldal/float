import { Observable } from 'rxjs';
/**
 * This is the internal core of the hash fragment/deeplink functionality.
 * You probably want the browser-enabled {@link UrlFragment} instance exported from <code>url-fragment</code>.
 */
export declare class UrlFragmentCore {
    private readonly hashSetter;
    /**
     * A stream of key-value params picked up from the URL fragment.
     * Be aware that the maps in this class handle decoded keys (to ensure correct comparison),
     * but encoded values (to be able to parse them into different output formats later).
     */
    private readonly parameters;
    private readonly paramWatches;
    private readonly knownParameters;
    private readonly distinctParams;
    /**
     * @param {(s: string) => void} hashSetter A function which will be called when the UrlFragmentCore wants to set the
     * hash in the browser.
     */
    constructor(hashSetter: (s: string) => void);
    /**
     * To be called when the hash fragment in the browser URL changes.
     * (This is automatically set up in {@link UrlFragment})
     */
    parse(hashFragment: string): void;
    /**
     * Returns an observable which will emit when the given key changes in the URL hash fragment.
     */
    watch(key: string): Observable<string | undefined>;
    watchNumber(key: string): Observable<number | undefined>;
    watchArray(key: string): Observable<string[] | undefined>;
    watchNumberArray(key: string): Observable<number[] | undefined>;
    /**
     * Setting a value in the hash fragment does <i>not</i> emit a corresponding value in the Observable from the
     * {@link UrlFragment#watch} methods. This is deliberate, to prevent accidental feedback loops, and to avoid that
     * the hash fragment is used as a component-to-component communications channel.
     * It is best to think of the URL fragment as a storage which a service/component can use to store and re-establish
     * its own state, not as a messaging system to other components.
     * As a (very strong) rule of thumb, a component should not <code>set</code> anything that it doesn't itself <code>watch</code>.
     */
    set(key: string, value: string | number | (string | number)[] | undefined): UrlFragmentCore;
    private parseHashToKnownParameters;
    private watchEncoded;
    private generateHash;
}
