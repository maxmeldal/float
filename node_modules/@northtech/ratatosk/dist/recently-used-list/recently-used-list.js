/**
 * Keeps track of most recently used items, accorting to when they are "touched".
 * @module
 */
import { BehaviorSubject } from 'rxjs';
/**
 * A collection keeping track of a number of objects ordered by when they were {@link touch}ed.
 */
export class RecentlyUsedList {
    /**
     * @param maxSize The maximum number of items in the list. Old items will automatically be evicted.
     * @param equality If given, this equality function will be used to determine whether a
     * {@link touch}ed object matches one already in the list. If not given, coercing object equality
     * will be used.
     */
    constructor(maxSize = 5, equality) {
        this.maxSize = maxSize;
        this.equality = equality;
        this.list = new BehaviorSubject([]);
    }
    /**
     * The current list of objects.
     */
    get value() {
        return this.list.value;
    }
    /**
     * An observable emitting a new version of the list every time an object is {@link touch}ed.
     */
    get valueChanges() {
        return this.list;
    }
    /**
     * Registers the "use" of the given object, adding it (or moving it) to the start of the list, evicting the oldest
     * entry if the list grows beyond its max size.
     */
    touch(used) {
        const l = this.list.value.filter(o => this.equality == null
            ? o !== used
            : !this.equality(o, used));
        l.unshift(used);
        if (l.length > this.maxSize) {
            l.length = this.maxSize;
        }
        this.list.next(l);
        return used;
    }
}
