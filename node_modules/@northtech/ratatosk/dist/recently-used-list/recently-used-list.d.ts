/**
 * Keeps track of most recently used items, accorting to when they are "touched".
 * @module
 */
import { Observable } from 'rxjs';
/**
 * A collection keeping track of a number of objects ordered by when they were {@link touch}ed.
 */
export declare class RecentlyUsedList<T> {
    private maxSize;
    private equality?;
    private list;
    /**
     * The current list of objects.
     */
    get value(): T[];
    /**
     * An observable emitting a new version of the list every time an object is {@link touch}ed.
     */
    get valueChanges(): Observable<T[]>;
    /**
     * @param maxSize The maximum number of items in the list. Old items will automatically be evicted.
     * @param equality If given, this equality function will be used to determine whether a
     * {@link touch}ed object matches one already in the list. If not given, coercing object equality
     * will be used.
     */
    constructor(maxSize?: number, equality?: ((a: T, b: T) => boolean) | undefined);
    /**
     * Registers the "use" of the given object, adding it (or moving it) to the start of the list, evicting the oldest
     * entry if the list grows beyond its max size.
     */
    touch(used: T): T;
}
