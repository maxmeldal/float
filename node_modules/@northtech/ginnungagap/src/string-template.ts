/**
 * Resolves a string template with placeholders on the form `${name}` with the values given in an object.
 * E.g. `resolveTemplate('Hello ${subject}', {subject: 'world'})` yields `'Hello world'`.
 * @param template The template string
 * @param values An object with the key/value pairs to fill out the template with.
 * @param returnIncompleteResult Optional. Default `false`. Determines what to return if not all placeholder values are
 * given in the object. If `false`, returns `undefined`. If `true`, returns a string with some placeholders not replaced;
 * still in their `${...}` form.
 */
export function resolveTemplate(template: string, values: { [key: string]: any } | undefined | null, returnIncompleteResult?: false): string | undefined;
/**
 * Resolves a string template with placeholders on the form `${name}` with the values given in an object.
 * E.g. `resolveTemplate('Hello ${subject}', {subject: 'world'})` yields `'Hello world'`.
 * @param template The template string
 * @param values An object with the key/value pairs to fill out the template with.
 * @param returnIncompleteResult Optional. Default `false`. Determines what to return if not all placeholder values are
 * given in the object. If `false`, returns `undefined`. If `true`, returns a string with some placeholders not replaced;
 * still in their `${...}` form.
 */
export function resolveTemplate(template: string, values: { [key: string]: any } | undefined | null, returnIncompleteResult: true): string;
export function resolveTemplate(template: string, values: { [key: string]: any } | undefined | null, returnIncompleteResult = false): string | undefined {
  let incomplete = false;
  const result = template.replace(/\${(.*?)}/g, (tag, tagName) => {
    let v = values ? values[tagName] : undefined;
    if (v == null) {
      incomplete = true;
      v = tag;
    }
    return v;
  });
  return (!incomplete || returnIncompleteResult) ? result : undefined;
}
