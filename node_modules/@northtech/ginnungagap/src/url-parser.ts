/**
 * Just use `new URL(s, document?.baseURI)` for the equivalent functionality in modern browsers.
 */
export function parseUrl(s: string): URL | HTMLAnchorElement {
  if (URL) {
    return document ? new URL(s, documentBase()) : new URL(s);
  } else {
    const a = document.createElement('a') as HTMLAnchorElement;
    a.href = s;
    return a;
  }
}

/**
 * Just use `document?.baseURI ?? ''` for the equivalent functionality in modern browsers.
 */
export function documentBase(): string {
  if (document.baseURI) {
    return document.baseURI;
  }
  const baseTag = document.getElementsByTagName('base');
  return (baseTag.length && baseTag.item(0)?.href
      ? baseTag.item(0)?.href
      : document.location?.href)
    ?? '';
}

/**
 * Combines a string and an optional second part (typically, REST ID), adding `/` between them if needed.
 * If the base string is `undefined`, the function will return `undefined` regardless of the ID part.
 */
export function urlWithId(url: string, id: string | number | undefined): string;
export function urlWithId(url: string | undefined, id: string | number | undefined): string | undefined;
export function urlWithId(url: string | undefined, id: string | number | undefined): string | undefined {
  if (url == undefined) {
    return undefined;
  }
  if (id == undefined) {
    return url;
  } else {
    return (url.endsWith('/') ? url : url + '/')
      + ((typeof id === 'number') ? id.toString(10) : encodeURIComponent(id));
  }
}

/**
 * Adds a trailing `/` to the string if it does not already end with a `/`
 *
 * It also converts an empty string to `./`
 */
export function ensureTrailingSlash(url: string): string;
export function ensureTrailingSlash(url: string | undefined | null): string | undefined;
export function ensureTrailingSlash(url: string | undefined | null): string | undefined {
  if (url == undefined) {
    return undefined;
  }
  if (url.length == 0) {
    return './';
  }
  if (url.endsWith('/')) {
    return url;
  }
  return url + '/';
}
