/**
 * Allows fluently building a comparator which handles multiple fields in an object.
 *
 * @example
 *
 *     const comparator = new ComparisonChain<Person>()
 *       .compareField(p => p.lastName)
 *       .compareField(p => p.firstName)
 *       .buildComparator();
 *     data.sort(comparator);
 */
export declare class ComparisonChain<T> {
    private fieldGetters;
    private collator;
    /**
     * @param fieldGetters Optionally takes an array of getter functions for fields to compare. In most cases, it is
     * clearer to give them individually and explicitly with the {@link compareField} method.
     * @param collator Optionally takes a Collator. This is equivalent to giving it with the {@link withCollator}
     * method. By defaults uses a `new Intl.Collator('da')`.
     */
    constructor(fieldGetters?: Array<(o: T) => any>, collator?: Intl.Collator);
    /**
     * Sets the Collator used for comparing strings.
     */
    withCollator(collator: Intl.Collator): ComparisonChain<T>;
    /**
     * Adds a method to extract a given field which should be included in the comparison.
     */
    compareField(fieldGetter: (o: T) => any): ComparisonChain<T>;
    /**
     * Creates a comparator based on the given fields and Collator.
     */
    buildComparator(): (a: T | null | undefined, b: T | null | undefined) => number;
}
/**
 * If the parameters are numbers or undefined, this function will return a simple comparison between them. If they are
 * any other type, `.toString()` will be called on them, and passed on to {@link numberAwareStringCompare}.
 */
export declare function compare(a: any, b: any, collator?: Intl.Collator): number;
/**
 * Sorts strings, taking into account emebedded (integer) numbers, so e.g. `"A2: Something"` sorts before `"A10: Other"`.
 * @param collator Can be given a Collator to sort according to language rules. By default uses a `new Intl.Collator('da')`.
 */
export declare function numberAwareStringCompare(s1: string | undefined, s2: string | undefined, collator?: Intl.Collator): number;
