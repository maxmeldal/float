export interface ConfigObject {
    [index: string]: string | number | undefined;
}
/**
 * Assembles a {@link ConfigObject} from a parameter list, accepting multiple notations:
 *
 * Each entry in the list can be
 *  * another object, in which case the keys and values are transferred to the generated config object
 *  * an array, which must have exactly two elements, on the form `[key, value]`
 *  * two consecutive parameters, which will be interpreted as `key, value`.
 *
 *  e.g. `toConfigObject('a', 1, {b: 2, d: 4}, ['c', 3])` will result in an object looking like `{a: 1, b: 2, c: 3, d: 4}`
 *
 *  The keys will always be strings, and the values will be undefined, number or string (with any other value having
 *  toString() called on it).
 *
 *  This function should generally not be called directly. It is primarily meant as an internal helper function for
 *  methods which for some reason has several complicated overload signatures.
 *
 *  Also, consider whether the ES6 Â´Object.fromEntries()` fulfills the purpose.
 */
export declare function toConfigObject(...o: unknown[]): ConfigObject;
/**
 * @deprecated Use {@link toConfigObject}
 */
export declare function collapseParamsToConfigObject(nameOrConfigObject: ConfigObject | string, value?: string | number | undefined, name2?: string, value2?: string | number | undefined, name3?: string, value3?: string | number | undefined, name4?: string, value4?: string | number | undefined): ConfigObject;
