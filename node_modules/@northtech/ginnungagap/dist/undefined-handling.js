/**
 * This module contains functions to fail-fast on null/undefined, and do various type guards and narrowing in TypeScript.
 * @module
 */
/**
 * Shorthand notation for converting an unexpected null/undefined reference to a more telling error message.
 *
 * E.g
 * `const mapElement = checkNotNull(document.getElementById('map'), 'Missing #map element in DOM');`
 * will result in a strongly-typed <code>HTMLElement</code> which cannot be null, or throw an Error with a dedicated message
 * (rather than simply crashing with a null-pointer reference when used later).
 * @param o An object of a union type including null and undefined.
 * @param message An optional message to throw as Error message.
 * @returns A non-null object
 * @throws If the object was null or undefined
 */
export function checkNotUndefined(o, message) {
    if (o == undefined) {
        throw new Error(message ? message : 'Invalid null/undefined reference');
    }
    return o;
}
/**
 * Alias for checkNotUndefined
 */
export const checkNotNull = checkNotUndefined;
/**
 * A type guard which uses generics to narrow a "`type` or `null` or `undefined`" to "`type`".
 * This is particularly useful with RxJs filter, as it recognizes the narrowing and infers the type of the resulting stream.
 */
export function isNotUndefined(o) {
    return o != undefined;
}
/**
 * Alias for isNotUndefined
 */
export const isNotNull = isNotUndefined;
/**
 * Returns a trimmed string, or `undefined` if the string ends up empty.
 */
export function trimEmptyToUndefined(s) {
    if (!s) {
        return undefined;
    }
    const result = s.trim();
    return result.length ? result : undefined;
}
/**
 * @deprecated
 * @see trimEmptyToUndefined
 * Legacy name
 */
export const trimmedEmptyToUndefined = trimEmptyToUndefined;
/**
 * Returns a trimmed string, converting `undefined` to an empty string.
 */
export function trimUndefinedToEmpty(s) {
    return s ? s.trim() : '';
}
/**
 * @deprecated
 * @see trimUndefinedToEmpty
 * Legacy name
 */
export const trimmedUndefinedToEmpty = trimUndefinedToEmpty;
/**
 * Converts the given function to a new function which calls through to the original function except if the input is
 * `undefined`, in which case the function returns undefined. In other words, it wraps a function to guard it against
 * `undefined` input.
 */
export function undefinedSafe(func) {
    return (t) => t == undefined ? undefined : func(t);
}
/**
 * Alias for undefinedSafe
 */
export const nullSafe = undefinedSafe;
