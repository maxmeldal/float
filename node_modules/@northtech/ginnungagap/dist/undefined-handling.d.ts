/**
 * This module contains functions to fail-fast on null/undefined, and do various type guards and narrowing in TypeScript.
 * @module
 */
/**
 * Shorthand notation for converting an unexpected null/undefined reference to a more telling error message.
 *
 * E.g
 * `const mapElement = checkNotNull(document.getElementById('map'), 'Missing #map element in DOM');`
 * will result in a strongly-typed <code>HTMLElement</code> which cannot be null, or throw an Error with a dedicated message
 * (rather than simply crashing with a null-pointer reference when used later).
 * @param o An object of a union type including null and undefined.
 * @param message An optional message to throw as Error message.
 * @returns A non-null object
 * @throws If the object was null or undefined
 */
export declare function checkNotUndefined<T>(o: T | null | undefined, message?: string): T;
/**
 * Alias for checkNotUndefined
 */
export declare const checkNotNull: typeof checkNotUndefined;
/**
 * A type guard which uses generics to narrow a "`type` or `null` or `undefined`" to "`type`".
 * This is particularly useful with RxJs filter, as it recognizes the narrowing and infers the type of the resulting stream.
 */
export declare function isNotUndefined<T>(o: T | null | undefined): o is T;
/**
 * Alias for isNotUndefined
 */
export declare const isNotNull: typeof isNotUndefined;
/**
 * Returns a trimmed string, or `undefined` if the string ends up empty.
 */
export declare function trimEmptyToUndefined(s: string | null | undefined): string | undefined;
/**
 * @deprecated
 * @see trimEmptyToUndefined
 * Legacy name
 */
export declare const trimmedEmptyToUndefined: typeof trimEmptyToUndefined;
/**
 * Returns a trimmed string, converting `undefined` to an empty string.
 */
export declare function trimUndefinedToEmpty(s: string | null | undefined): string;
/**
 * @deprecated
 * @see trimUndefinedToEmpty
 * Legacy name
 */
export declare const trimmedUndefinedToEmpty: typeof trimUndefinedToEmpty;
/**
 * Converts the given function to a new function which calls through to the original function except if the input is
 * `undefined`, in which case the function returns undefined. In other words, it wraps a function to guard it against
 * `undefined` input.
 */
export declare function undefinedSafe<T, U>(func: (t: T) => U): (t: T | undefined | null) => U | undefined;
/**
 * Alias for undefinedSafe
 */
export declare const nullSafe: typeof undefinedSafe;
