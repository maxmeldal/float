/**
 * Provides a fuzzy text search in the fields of a collection of JavaScript objects.
 */
export declare class TrigramIndex<T> {
    private readonly docList;
    private stringMapper;
    private docsByTrigram;
    private resultForEmptySearch;
    private static defaultSearchStringMapper;
    /**
     * Turns a text string into an array of uppercase trigrams. Used internally.
     */
    private static uniqueTrigrams;
    /**
     * Builds a new TrigramIndex based on the given array and search-string mapper function.
     */
    static of<U>(docs: Iterable<U>, mapperFunction?: (doc: U) => string): TrigramIndex<U>;
    /**
     * The mapper function given here will be used to turn document objects of type T into text to be used
     * as searchable keywords.
     * Be aware that if this method is called after documents have already been added, the index will be completely
     * rebuilt using the new mapper function, so you generally want to call this function <i>before</i> {@link addAll}, or
     * use the convenient, type-inferring static shorthand {@link TrigramIndex.of}.
     *
     * @param mapperFunction A function taking an object of type T and returning a string.
     * @returns "this", for chain notations.
     */
    searchStringMapper(mapperFunction: (doc: T) => string): TrigramIndex<T>;
    /**
     * If an empty string is given to the {@link find} function, the TrigramIndex will return the full list of documents.
     * This is useful if the search represents a narrowing of data which is also paginated, such as in a table view.
     * @see emptySearchReturnsNone
     * @see emptySearchReturnsAllIfFewerThan
     * @see emptySearchReturns
     */
    emptySearchReturnsAll(): this;
    /**
     * If an empty string is given to the {@link find} function, the TrigramIndex will return an empty array.
     * This is useful if the search represents an active user action, not showing anything until the user has typed some
     * search criteria.
     * @see emptySearchReturnsAll
     * @see emptySearchReturnsAllIfFewerThan
     * @see emptySearchReturns
     */
    emptySearchReturnsNone(): this;
    /**
     * If an empty string is given to the {@link find} function, it may return either an empty array, or all documents.
     * The primary use case for this is a combobox where a dropdown presents the available choices even before the user
     * starts typing anything to narrow it down, but it doesn't make sense to show the full list when there are too many
     * entries, since it would overwhelm the UI in both size and performance.
     *
     * @param {number} threshold If the total number of documents in the TrigramIndex is less than this threshold, the
     * full list will be returned when the search string is empty.
     * @see emptySearchReturnsAll
     * @see emptySearchReturnsNone
     * @see emptySearchReturns
     */
    emptySearchReturnsAllIfFewerThan(threshold: number): this;
    /**
     * If an empty string is given to the {@link find} function, this function will be invoked to provide the list.
     * An example use of this could be to track the most recently used documents, and return those when the search string
     * is empty.
     *
     * @see emptySearchReturnsAll
     * @see emptySearchReturnsAllIfFewerThan
     * @see emptySearchReturnsNone
     */
    emptySearchReturns(supplier: () => T[]): this;
    /**
     * Adds all document objects in the array, using the mapper function to generate the search keywords.
     * @param docs An array of objects of type T.
     * @returns "this", for chain notations.
     */
    addAll(docs: Iterable<T>): TrigramIndex<T>;
    /**
     * Adds the given "document" to the search index.
     * @param doc An object of type T.
     * @param searchableString (Optional) The keywords the given object can be found by, i.e. some relevant text
     * representation of the object. If no string is given here, the mapper given by {@link searchStringMapper}
     * (possibly the default mapper) will be used to generate a string.
     * @returns "this", for chain notations.
     */
    add(doc: T, searchableString?: string): TrigramIndex<T>;
    /**
     * Performs a fuzzy search amongst the registered document objects.
     * @param searchString The text to search for.
     * If an empty string or undefined is given, the index will return either an empty array, or all documents,
     * depending the setting of {@link emptySearchReturnsAllIfFewerThan}
     * @param maxHits The maximum number of documents this function should return.
     * @param quality A number from 0 to 1, describing the fraction of search trigrams which must be found in a
     * document for it to be considered a usable result. By requiring a certain threshold, we prevent the algorithm
     * from returning technically-best-but-practically-irrelevant results.
     * @returns An array of objects of type T, sorted by relevance.
     */
    find(searchString: string | undefined, maxHits?: number, quality?: number): T[];
}
