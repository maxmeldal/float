import { PickKeys } from 'ts-essentials';
import { Temporal } from '@js-temporal/polyfill';
/**
 * I am not happy with this one. It's not obvious how to combine it with handling other than Temporal fields, and it
 * does not handle nested objects.
 */
export declare class TemporalJson<T> {
    private readonly parsers;
    instantFields(...k: PickKeys<T, Temporal.Instant | undefined | null>[]): this;
    /**
     * Be aware that this one requires an actual ZonedDateTime notation, i.e. with full bracketed, city-based zone ID.
     * (Consider whether what you want is actually an Instant field which is formatted in the UI, or the {@link zonedDateTimesFromInstantFields}).
     */
    zonedDateTimeFields(...k: PickKeys<T, Temporal.ZonedDateTime | undefined | null>[]): this;
    plainDateFields(...k: PickKeys<T, Temporal.PlainDate | undefined | null>[]): this;
    plainTimeFields(...k: PickKeys<T, Temporal.PlainTime | undefined | null>[]): this;
    zonedDateTimesFromInstantFields(zoneId: (Temporal.TimeZoneProtocol | string | {
        timeZone: Temporal.TimeZoneProtocol | string;
    }), ...k: PickKeys<T, Temporal.ZonedDateTime | undefined | null>[]): this;
    fieldParser<KeyT extends keyof T>(k: KeyT, parser: (v: any) => T[KeyT]): this;
    deserializeTemporalFields(o: any): T;
    reviver(k: string, v: any): any;
}
