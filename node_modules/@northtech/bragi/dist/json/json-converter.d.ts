/**
 * The `JsonConverter` wraps the provided serializers, deserializers and/or stringifiers and revivers into a utility
 * object which can convert between JSON and a given TypeScript type.
 * Remember that, when all is said and done, parsing JSON into typed objects relies on a type assertion. If the server
 * does not actually provide the data the deserializers claim it does, there's nothing neither the compiler, nor the
 * runtime, can do about it. So the type provided by this utility class is only as strong and correct as the
 * deserializers given.
 */
export declare class JsonConverter<ItemT> {
    #private;
    constructor(config?: {
        reviver?: ((k: string, v: any) => any) | undefined;
        deserializer?: ((jsonObject: Record<string, any>) => ItemT) | undefined;
        serializer?: ((item: Partial<ItemT>) => Record<string, any>) | undefined;
        replacer?: ((k: string, v: any) => any) | undefined;
    });
    objectToString(o: Partial<ItemT> | Partial<ItemT>[] | undefined | null): string;
    stringToObject(json: string | undefined | null): undefined | ItemT;
    stringToArray(json: string | undefined | null): ItemT[];
}
