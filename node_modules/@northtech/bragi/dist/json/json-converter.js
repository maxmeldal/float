var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _JsonConverter_reviver, _JsonConverter_deserializer, _JsonConverter_serializer, _JsonConverter_replacer;
import { nullSafe } from '@northtech/ginnungagap';
/**
 * The `JsonConverter` wraps the provided serializers, deserializers and/or stringifiers and revivers into a utility
 * object which can convert between JSON and a given TypeScript type.
 * Remember that, when all is said and done, parsing JSON into typed objects relies on a type assertion. If the server
 * does not actually provide the data the deserializers claim it does, there's nothing neither the compiler, nor the
 * runtime, can do about it. So the type provided by this utility class is only as strong and correct as the
 * deserializers given.
 */
export class JsonConverter {
    constructor(config) {
        _JsonConverter_reviver.set(this, void 0);
        _JsonConverter_deserializer.set(this, void 0);
        _JsonConverter_serializer.set(this, void 0);
        _JsonConverter_replacer.set(this, void 0);
        __classPrivateFieldSet(this, _JsonConverter_reviver, config === null || config === void 0 ? void 0 : config.reviver, "f");
        __classPrivateFieldSet(this, _JsonConverter_deserializer, (config === null || config === void 0 ? void 0 : config.deserializer) ? nullSafe(config === null || config === void 0 ? void 0 : config.deserializer) : undefined, "f");
        __classPrivateFieldSet(this, _JsonConverter_serializer, (config === null || config === void 0 ? void 0 : config.serializer) ? nullSafe(config.serializer) : undefined, "f");
        __classPrivateFieldSet(this, _JsonConverter_replacer, config === null || config === void 0 ? void 0 : config.replacer, "f");
    }
    objectToString(o) {
        const serializer = __classPrivateFieldGet(this, _JsonConverter_serializer, "f");
        const prepped = serializer
            ? (Array.isArray(o) ? o.map(e => serializer(e)) : serializer(o))
            : o;
        return JSON.stringify(prepped, __classPrivateFieldGet(this, _JsonConverter_replacer, "f"));
    }
    stringToObject(json) {
        if (!json) {
            return undefined;
        }
        const revived = JSON.parse(json, __classPrivateFieldGet(this, _JsonConverter_reviver, "f"));
        const deserializer = __classPrivateFieldGet(this, _JsonConverter_deserializer, "f");
        return deserializer
            ? deserializer(revived)
            : revived;
    }
    stringToArray(json) {
        if (!json) {
            return [];
        }
        const revived = JSON.parse(json, __classPrivateFieldGet(this, _JsonConverter_reviver, "f"));
        if (!revived) {
            return [];
        }
        const deserializer = __classPrivateFieldGet(this, _JsonConverter_deserializer, "f");
        if (Array.isArray(revived)) {
            return deserializer
                ? revived.map(e => deserializer(e))
                : revived;
        }
        else {
            throw new Error(json + ' is not an array');
        }
    }
}
_JsonConverter_reviver = new WeakMap(), _JsonConverter_deserializer = new WeakMap(), _JsonConverter_serializer = new WeakMap(), _JsonConverter_replacer = new WeakMap();
