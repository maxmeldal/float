import { BehaviorSubject, Observable } from 'rxjs';
/**
 * Carries the url string and RequestInit needed for a fetch call, without being a fully instantiated Request object,
 * making it easier to manipulate with simple field manipulations.
 */
export interface SimpleRequest {
    url: string;
    requestInit?: RequestInit | undefined;
}
/**
 * A rewriter is a function which takes a RequestData and returns a (possibly) modified version of it. This would
 * typically be adding necessary Authentication headers, but in principle it can rewrite anything.
 * (A RequestRewriter can also reject a request by throwing an {@Link Aborted} exception).
 */
export declare type RequestRewriter = (request: SimpleRequest) => SimpleRequest | Promise<SimpleRequest> | Observable<SimpleRequest>;
/**
 * A default implementation of a {@link RequestRewriter} which doesn't manipulate the request at all.
 */
export declare const ANONYMOUS: RequestRewriter;
/**
 * A default implementation of a {@link RequestRewriter} which always throws an {@link Aborted} error. (E.g. if the user
 * has not logged in yet, and all attempts to contact a server endpoint should be denied).
 */
export declare const ABORT: RequestRewriter;
export interface RequestRewriters {
    ALL?: RequestRewriter | undefined;
    ALL_WRITES?: RequestRewriter | undefined;
    GET?: RequestRewriter | undefined;
    PUT?: RequestRewriter | undefined;
    POST?: RequestRewriter | undefined;
    PATCH?: RequestRewriter | undefined;
    DELETE?: RequestRewriter | undefined;
}
/**
 * An error subclass intended to be used by the {@link RequestRewriter} to signal that the request was deliberately
 * aborted.
 */
export declare class Aborted extends Error {
    readonly request: SimpleRequest;
    constructor(request: SimpleRequest);
}
export declare function setHeader(request: SimpleRequest, name: string, value: string): SimpleRequest;
export declare function setHeaders(request: SimpleRequest, headers: Record<string, string>): SimpleRequest;
/**
 * The `RewritingFetcher` is a fairly thin layer around the native `fetch` method, allowing asynchronous manipulation of
 * the request before it is sent. The primary motivation is adding authorization headers, likely based on a refresh
 * token, but the rewriter can in principle manipulate the request in any way.
 */
export declare class RewritingFetcher {
    private readonly requestRewriters;
    static readonly inflightReads: BehaviorSubject<number>;
    static readonly inflightWrites: BehaviorSubject<number>;
    constructor(config?: {
        requestRewriters?: RequestRewriters | undefined;
    });
    /**
     * A RequestRewriter _must_ be set (even if just the do-nothing {@link ANONYMOUS} rewriter) before a server can be
     * contacted. (The Fetcher cannot make assumptions and default to an anonymous access attempt, since we do not want
     * to spam requests to a server which requires login before the login rewriter is ready).
     */
    setRequestRewriter(requestRewriters: RequestRewriters): this;
    fetch(url: string, requestInit?: RequestInit): Observable<Response>;
    fetch(request: SimpleRequest): Observable<Response>;
    private static getInflightTracker;
}
