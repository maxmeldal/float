import { RequestRewriters, RewritingFetcher } from './rewriting-fetcher';
import { JsonConverter } from '../json';
import { BehaviorSubject, Observable } from 'rxjs';
export declare class JsonFetcher<ItemT, ErrorT> extends RewritingFetcher {
    readonly inflightReads: BehaviorSubject<number>;
    readonly inflightWrites: BehaviorSubject<number>;
    readonly error: BehaviorSubject<HttpError<ErrorT> | undefined>;
    readonly jsonConverter: JsonConverter<ItemT>;
    readonly errorJsonConverter: JsonConverter<ErrorT>;
    constructor(config?: {
        requestRewriters?: RequestRewriters | undefined;
        jsonConverter?: JsonConverter<ItemT> | undefined;
        errorJsonConverter?: JsonConverter<ErrorT> | undefined;
    });
    fetchJson(url: string, typedRequestInit?: Omit<RequestInit, 'body'> & {
        body?: Partial<ItemT> | string | undefined;
    }): Observable<{
        response: Response;
        item: ItemT;
    }>;
    fetchJsonList(url: string, typedRequestInit?: Omit<RequestInit, 'body'> & {
        body?: Partial<ItemT>[] | string | undefined;
    }): Observable<{
        response: Response;
        items: ItemT[];
    }>;
    private fetchJsonInternal;
    private parseError;
    private getInflightTracker;
}
export declare class HttpError<ErrorT> extends Error {
    readonly response: Response;
    readonly error: ErrorT | undefined;
    readonly errorString: string | undefined;
    constructor(response: Response, error: ErrorT | undefined, errorString: string | undefined);
}
