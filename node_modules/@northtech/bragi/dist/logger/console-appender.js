var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ConsoleAppender_firstAccess, _ConsoleAppender_defaultLogLevel, _ConsoleAppender_logLevels;
export class ConsoleAppender {
    constructor() {
        _ConsoleAppender_firstAccess.set(this, new Set());
        _ConsoleAppender_defaultLogLevel.set(this, 'INFO');
        _ConsoleAppender_logLevels.set(this, {});
    }
    setLogLevel(defaultLogLevel, componentLevels) {
        let componentConfig = componentLevels;
        if (typeof defaultLogLevel === 'string') {
            __classPrivateFieldSet(this, _ConsoleAppender_defaultLogLevel, defaultLogLevel, "f");
        }
        else {
            componentConfig = defaultLogLevel;
        }
        if (componentConfig) {
            for (const k in componentConfig) {
                __classPrivateFieldGet(this, _ConsoleAppender_logLevels, "f")[k] = componentConfig[k];
            }
        }
        return this;
    }
    includeInLog(component, level) {
        var _a;
        return this.levelToNumber(level) >= this.levelToNumber((_a = __classPrivateFieldGet(this, _ConsoleAppender_logLevels, "f")[component]) !== null && _a !== void 0 ? _a : __classPrivateFieldGet(this, _ConsoleAppender_defaultLogLevel, "f"));
    }
    levelToNumber(level) {
        if (level === 'DEBUG') {
            return 1;
        }
        if (level === 'INFO') {
            return 2;
        }
        if (level === 'WARN') {
            return 3;
        }
        return 4;
    }
    append(logEntry) {
        const log = [logEntry.level, '[' + logEntry.component + ']', logEntry.message];
        if (logEntry.detailObject) {
            log.push('details:');
            log.push(logEntry.detailObject);
        }
        if (logEntry.error) {
            log.push('error:');
            log.push(logEntry.error);
        }
        if (this.includeInLog(logEntry.component, logEntry.level)) {
            console.log(...log);
        }
        else if (!__classPrivateFieldGet(this, _ConsoleAppender_firstAccess, "f").has(logEntry.component)) {
            __classPrivateFieldGet(this, _ConsoleAppender_firstAccess, "f").add(logEntry.component);
            const componentLevel = __classPrivateFieldGet(this, _ConsoleAppender_logLevels, "f")[logEntry.component];
            console.log(componentLevel ? '[' + logEntry.component + '] log level is ' + componentLevel
                : '[' + logEntry.component + '] log level is ' + __classPrivateFieldGet(this, _ConsoleAppender_defaultLogLevel, "f") + ' (default)');
        }
    }
}
_ConsoleAppender_firstAccess = new WeakMap(), _ConsoleAppender_defaultLogLevel = new WeakMap(), _ConsoleAppender_logLevels = new WeakMap();
