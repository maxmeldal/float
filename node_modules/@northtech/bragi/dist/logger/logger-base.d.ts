import { Observable } from 'rxjs';
export declare type LogLevel = 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';
export interface LogEntry<T extends string> {
    readonly id: number;
    readonly level: LogLevel;
    readonly component: T;
    readonly message: string;
    readonly detailObject?: any;
    readonly error?: Error | undefined;
    readonly timestampMillis: number;
}
/**
 * @experimental
 *
 * The generic type `COMPONENT_NAMES` can be used to restrict the possible component names. At heart, it is just a string
 * (and it's fully valid to create a `Logger<string>`), but to enforce consistency, you can implement it as a union type
 * of specific strings, e.g. `Logger<'network' | 'login' | 'unknown'>`.
 */
export declare class LoggerBase<ComponentNamesT extends string> extends Observable<LogEntry<ComponentNamesT>> {
    #private;
    constructor();
    debug(component: ComponentNamesT, message: string, detailObjectOrError?: any, error?: any): void;
    info(component: ComponentNamesT, message: string, detailObjectOrError?: any, error?: any): void;
    warn(component: ComponentNamesT, message: string, detailObjectOrError?: any, error?: any): void;
    error(component: ComponentNamesT, message: string, detailObjectOrError?: any, error?: any): void;
    log(level: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR', component: ComponentNamesT, message: string, detailObjectOrError?: any, error?: any): void;
}
