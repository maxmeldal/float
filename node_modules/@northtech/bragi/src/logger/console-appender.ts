import { LogEntry, LogLevel } from './logger-base';

export class ConsoleAppender<ComponentNamesT extends string> {
  #firstAccess = new Set<string>();

  #defaultLogLevel: LogLevel = 'INFO';
  #logLevels: { [key in ComponentNamesT]?: LogLevel } = {};

  setLogLevel(defaultLogLevel: LogLevel): this;
  setLogLevel(componentLevels: { [key in ComponentNamesT]?: LogLevel }): this;
  setLogLevel(defaultLogLevel: LogLevel, componentLevels?: { [key in ComponentNamesT]?: LogLevel }): this;
  setLogLevel(defaultLogLevel: LogLevel | { [key in ComponentNamesT]?: LogLevel }, componentLevels?: { [key in ComponentNamesT]?: LogLevel }): this {
    let componentConfig = componentLevels;
    if (typeof defaultLogLevel === 'string') {
      this.#defaultLogLevel = defaultLogLevel;
    } else {
      componentConfig = defaultLogLevel;
    }
    if (componentConfig) {
      for (const k in componentConfig) {
        this.#logLevels[k] = componentConfig[k];
      }
    }
    return this;
  }

  private includeInLog(component: ComponentNamesT, level: LogLevel): boolean {
    return this.levelToNumber(level) >= this.levelToNumber(this.#logLevels[component] ?? this.#defaultLogLevel);
  }

  levelToNumber(level: LogLevel): number {
    if (level === 'DEBUG') {
      return 1;
    }
    if (level === 'INFO') {
      return 2;
    }
    if (level === 'WARN') {
      return 3;
    }
    return 4;
  }

  append(logEntry: LogEntry<ComponentNamesT>): void {
    const log: any[] = [logEntry.level, '[' + logEntry.component + ']', logEntry.message];
    if (logEntry.detailObject) {
      log.push('details:');
      log.push(logEntry.detailObject);
    }
    if (logEntry.error) {
      log.push('error:');
      log.push(logEntry.error);
    }
    if (this.includeInLog(logEntry.component, logEntry.level)) {
      console.log(...log);
    } else if (!this.#firstAccess.has(logEntry.component)) {
      this.#firstAccess.add(logEntry.component);
      const componentLevel = this.#logLevels[logEntry.component];
      console.log(componentLevel ? '[' + logEntry.component + '] log level is ' + componentLevel
        : '[' + logEntry.component + '] log level is ' + this.#defaultLogLevel + ' (default)');
    }
  }
}
