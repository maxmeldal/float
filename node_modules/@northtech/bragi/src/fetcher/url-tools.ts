/**
 * Adds a trailing `/` to the string if it does not already end with a `/`
 *
 * It also converts an empty string to `./`
 */
import { isNotUndefined } from '@northtech/ginnungagap';

export function ensureTrailingSlash(url: string): string;
export function ensureTrailingSlash(url: string | undefined | null): string | undefined;
export function ensureTrailingSlash(url: string | undefined | null): string | undefined {
  if (url == null) {
    return undefined;
  }
  url = url.trim();
  if (url.length === 0) {
    return './';
  }
  if (url.endsWith('/')) {
    return url;
  }
  return url + '/';
}

export function noTrailingSlash(url: string): string;
export function noTrailingSlash(url: string | undefined | null): string | undefined;
export function noTrailingSlash(url: string | undefined | null): string | undefined {
  if (url == null) {
    return undefined;
  }
  url = url.trim();
  while (url.endsWith('/')) {
    url = url.substring(0, url.length - 1);
  }
  return url;
}


export function ensureLeadingQuestionmark(url: string): string;
export function ensureLeadingQuestionmark(url: string | undefined | null): string | undefined;
export function ensureLeadingQuestionmark(url: string | undefined | null): string | undefined {
  if (url == null) return undefined;
  if (url.length === 0) return '';
  return '?' + url;
}

export function toQueryString(query: string | { [key: string]: string | number | boolean | undefined | null } | undefined | null): string {
  if (!query) return '';
  return typeof query === 'string'
    ? query
    : Object.keys(query)
      .map(k => {
        const v = query[k];
        return v == null ? undefined : k + '=' + encodeURIComponent(v);
      })
      .filter(isNotUndefined)
      .join('&');
}
