import { nullSafe } from '@northtech/ginnungagap';

/**
 * The `JsonConverter` wraps the provided serializers, deserializers and/or stringifiers and revivers into a utility
 * object which can convert between JSON and a given TypeScript type.
 * Remember that, when all is said and done, parsing JSON into typed objects relies on a type assertion. If the server
 * does not actually provide the data the deserializers claim it does, there's nothing neither the compiler, nor the
 * runtime, can do about it. So the type provided by this utility class is only as strong and correct as the
 * deserializers given.
 */
export class JsonConverter<ItemT> {
  readonly #reviver: ((k: string, v: any) => any) | undefined;
  readonly #deserializer: ((jsonObject: Record<string, any> | undefined | null) => ItemT | undefined) | undefined;
  readonly #serializer: ((item: Partial<ItemT> | undefined | null) => Record<string, any> | undefined) | undefined;
  readonly #replacer: ((k: string, v: any) => any) | undefined;

  constructor(config?: {
    reviver?: ((k: string, v: any) => any) | undefined;
    deserializer?: ((jsonObject: Record<string, any>) => ItemT) | undefined;
    serializer?: ((item: Partial<ItemT>) => Record<string, any>) | undefined;
    replacer?: ((k: string, v: any) => any) | undefined;
  }) {
    this.#reviver = config?.reviver;
    this.#deserializer = config?.deserializer ? nullSafe(config?.deserializer) : undefined;
    this.#serializer = config?.serializer ? nullSafe(config.serializer) : undefined;
    this.#replacer = config?.replacer;
  }

  objectToString(o: Partial<ItemT> | Partial<ItemT>[] | undefined | null): string {
    const serializer = this.#serializer;
    const prepped = serializer
      ? (Array.isArray(o) ? o.map(e => serializer(e)) : serializer(o))
      : o;
    return JSON.stringify(prepped, this.#replacer);
  }

  stringToObject(json: string | undefined | null): undefined | ItemT {
    if (!json) {
      return undefined;
    }
    const revived = JSON.parse(json, this.#reviver);
    const deserializer = this.#deserializer;
    return deserializer
      ? deserializer(revived)
      : revived;
  }

  stringToArray(json: string | undefined | null): ItemT[] {
    if (!json) {
      return [];
    }
    const revived = JSON.parse(json, this.#reviver);
    if (!revived) {
      return [];
    }
    const deserializer = this.#deserializer;
    if (Array.isArray(revived)) {
      return deserializer
        ? revived.map(e => deserializer(e))
        : revived;
    } else {
      throw new Error(json + ' is not an array');
    }
  }
}
